# .github/workflows/coverage.yml
name: Code Coverage

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  OPENAI_API_KEY: "sk-test-key-for-ci" # Mock key, actual calls should be mocked
  NEXTAUTH_SECRET: "ci-nextauth-secret-placeholder"
  NEXTAUTH_URL: "http://localhost:3000"
  SUPABASE_URL: "http://localhost:54321" # Mock
  SUPABASE_SERVICE_ROLE_KEY: "mock.supabase.key" # Mock

jobs:
  coverage:
    name: Generate Code Coverage Report
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb?schema=public"

      - name: Run Database Migrations
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb?schema=public"

      - name: Run tests with coverage
        run: pnpm test:coverage # Assumes 'test:coverage' script is 'vitest run --coverage'
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb?schema=public"

      - name: Upload coverage to Codecov (Optional)
        if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Repository secret for Codecov token
          files: ./coverage/lcov.info # Path to LCOV file
          fail_ci_if_error: true # Optional: fail CI if Codecov upload fails
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload HTML Coverage Report as Artifact
        if: always() # Always upload, even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: coverage/ # Upload the entire coverage directory
          retention-days: 7 # Keep artifacts for 7 days

      - name: Upload LCOV Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-lcov
          path: coverage/lcov.info # Specifically upload lcov.info
          retention-days: 7