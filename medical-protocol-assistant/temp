<codegen_planning>
Working on **Step 2 – Setup Development Environment**.

1.  **Next Unchecked Step**: Step 2.
2.  **Plan Edits**: No edits needed.
3.  **File Count/Spec Constraints**:
    *   `.eslintrc.json`: ESLint config.
    *   `.prettierrc.json`: Prettier config. (Using `.json` for consistency, though `.js` or no extension is common).
    *   `.husky/pre-commit`: Husky pre-commit hook script.
    *   `.env.example`: Template for environment variables.
    *   `README.md`: Basic project README with setup instructions.
    *   `lint-staged.config.js`: Configuration for lint-staged. (The plan mentions "lint-staged configuration" in `.husky/pre-commit`, but it's better practice to have a separate `lint-staged.config.js` or define it in `package.json`). I'll add `lint-staged.config.js` and ensure husky calls it.
    *   Update `package.json` to include dev dependencies: `eslint-config-prettier`, `eslint-plugin-prettier`, `husky`, `lint-staged`, `prettier`, `prettier-plugin-tailwindcss`.
    *   Total files: 6 new files, 1 modified. This is well within the limit.
4.  **Edge Cases, Tests, Lint Fixes**:
    *   ESLint rules will be strict, extending `next/core-web-vitals` and `prettier`.
    *   Prettier will be configured with sensible defaults and Tailwind CSS plugin.
    *   Husky hook will run `lint-staged`.
    *   `lint-staged` will run Prettier and ESLint on staged files.
    *   `README.md` will cover basic setup and development commands.
    *   `.env.example` will list placeholders for common variables like `DATABASE_URL`, `NEXTAUTH_SECRET`, `OPENAI_API_KEY`.

The technical specification's tooling section mentions:
- Linter: ESLint with strict config
- Formatter: Prettier
- Git hooks: Husky + lint-staged

I will ensure these are set up. I will also add `prettier-plugin-tailwindcss` to `devDependencies` to ensure Tailwind CSS class sorting, which is good practice with Tailwind.
</codegen_planning>
Here's what I did and why: This `.eslintrc.json` file configures ESLint for the project. It extends `next/core-web-vitals` for Next.js specific rules and `prettier` to avoid conflicts with Prettier. It also includes basic parser options for TypeScript and environment settings.
Filepath: .eslintrc.json
```json
{
  "extends": ["next/core-web-vitals", "prettier"],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "rules": {
    // Add any project-specific ESLint rules here
    // Example:
    // "no-console": "warn",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ]
  }
}
```

Here's what I did and why: This `.prettierrc.json` file configures Prettier, the code formatter. It sets standard formatting options like tab width, semicolons, and quote style. It also includes the `prettier-plugin-tailwindcss` for automatic Tailwind CSS class sorting, which is crucial for maintaining consistent styling.
Filepath: .prettierrc.json
```json
{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": false,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "plugins": ["prettier-plugin-tailwindcss"]
}
```

Here's what I did and why: This file creates the Husky pre-commit hook. It ensures that `lint-staged` is run before each commit, which in turn will run linters and formatters on staged files. This helps maintain code quality and consistency automatically.
Filepath: .husky/pre-commit
```sh
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

npx lint-staged
```

Here's what I did and why: This `lint-staged.config.js` file configures `lint-staged`. It specifies that Prettier should be run to format all staged files, and ESLint (with `--fix`) should be run on TypeScript and JavaScript files. This ensures code is formatted and linted before being committed.
Filepath: lint-staged.config.js
```js
module.exports = {
  // Format all staged files
  "*.{js,jsx,ts,tsx,json,css,scss,md,html}": "prettier --write",

  // Lint then format TypeScript and JavaScript files
  "*.{js,jsx,ts,tsx}": ["eslint --fix"],
};
```

Here's what I did and why: This `.env.example` file provides a template for necessary environment variables. Users should copy this to `.env.local` and fill in their actual credentials. This keeps sensitive information out of version control.
Filepath: .env.example
```env
# PostgreSQL Database Connection URL
# Example: postgresql://user:password@host:port/database
DATABASE_URL="postgresql://postgres:password@localhost:5432/medical_protocols"

# NextAuth Configuration
# Generate a secret with `openssl rand -base64 32`
NEXTAUTH_SECRET="YOUR_NEXTAUTH_SECRET"
NEXTAUTH_URL="http://localhost:3000" # Change for production

# OpenAI API Key
OPENAI_API_KEY="sk-YOUR_OPENAI_API_KEY"
OPENAI_ORG_ID="" # Optional: Your OpenAI Organization ID

# DeepResearch API Key (if applicable)
DEEPRESEARCH_API_KEY=""

# Application Configuration
# LOG_LEVEL can be: 'fatal', 'error', 'warn', 'info', 'debug', 'trace' or 'silent'.
LOG_LEVEL="info"

# AWS S3 Bucket (for document storage, if used)
# AWS_ACCESS_KEY_ID=""
# AWS_SECRET_ACCESS_KEY=""
# AWS_REGION=""
# S3_BUCKET_NAME=""
```

Here's what I did and why: This `README.md` provides basic information about the project, including setup instructions and available development scripts. This is the first point of entry for new developers.
Filepath: README.md
```md
# Medical Protocol Development Assistant

Ferramenta web para criação assistida por IA de protocolos médicos padronizados, gerando documentação estruturada (Word/ABNT com 13 seções) e fluxogramas visuais complexos para pronto-atendimentos da rede Sancta Maggiore/Prevent Senior.

## Project Setup

### Prerequisites

- Node.js (v18 or higher recommended)
- pnpm (https://pnpm.io/installation)
- Docker (for local PostgreSQL database)

### Installation

1.  **Clone the repository:**
    ```bash
    git clone <repository-url>
    cd medical-protocol-assistant
    ```

2.  **Install dependencies:**
    ```bash
    pnpm install
    ```

3.  **Set up environment variables:**
    Copy the `.env.example` file to `.env.local` and update the values accordingly.
    ```bash
    cp .env.example .env.local
    ```
    You will need to provide:
    - `DATABASE_URL`: Your PostgreSQL connection string.
    - `NEXTAUTH_SECRET`: A secret for NextAuth (generate with `openssl rand -base64 32`).
    - `OPENAI_API_KEY`: Your OpenAI API key.
    - (Optionally) `DEEPRESEARCH_API_KEY` and AWS credentials if used.

4.  **Set up local PostgreSQL database (using Docker):**
    If you don't have a PostgreSQL instance, you can run one using Docker:
    ```bash
    docker run --name medical-protocols-db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres:15
    ```
    Ensure your `DATABASE_URL` in `.env.local` matches these credentials.
    Example: `DATABASE_URL="postgresql://postgres:password@localhost:5432/medical_protocols"` (you might need to create the `medical_protocols` database manually or let Prisma handle it).

5.  **Initialize Husky git hooks:**
    ```bash
    pnpm husky install
    ```
    This will set up pre-commit hooks for linting and formatting.

### Running the Development Server

```bash
pnpm dev
```

The application will be available at `http://localhost:3000`.

### Available Scripts

-   `pnpm dev`: Starts the development server.
-   `pnpm build`: Builds the application for production.
-   `pnpm start`: Starts the production server.
-   `pnpm lint`: Lints the codebase using ESLint.
-   `pnpm format`: Formats the codebase using Prettier.
-   `pnpm prisma:migrate:dev`: Runs database migrations for development.
-   `pnpm prisma:generate`: Generates Prisma Client.
-   `pnpm prisma:studio`: Opens Prisma Studio to view/edit data.

## Code Standards

-   **Formatting**: Prettier (auto-formatted on commit)
-   **Linting**: ESLint (auto-checked on commit)
-   **TypeScript**: Strict mode, no `any` types.
-   **Naming Conventions**:
    -   Components: `PascalCase`
    -   Functions/hooks: `camelCase`
    -   Constants: `UPPER_SNAKE_CASE`
    -   Files: `kebab-case`

## Project Structure

The project follows a standard Next.js App Router structure. Key directories:
- `src/app/`: Next.js App Router pages and layouts.
- `src/components/`: Reusable React components.
- `src/lib/`: Core libraries, utilities, AI clients, validators, generators.
- `src/server/`: Server-side logic, tRPC routers, database schema.
- `src/types/`: Global TypeScript type definitions.
- `prisma/`: Prisma schema and migration files.
- `public/`: Static assets (templates, data files).
- `tests/`: Unit, integration, and E2E tests.
```

Here's what I did and why: This `package.json` is updated to include development dependencies necessary for linting, formatting, and git hooks as specified in Step 2. `eslint-config-prettier` and `eslint-plugin-prettier` ensure ESLint and Prettier work well together. `husky` and `lint-staged` automate code quality checks before commits. `prettier-plugin-tailwindcss` is added for Tailwind CSS class sorting. A `prepare` script is added for Husky installation.
Filepath: package.json
```json
{
  "name": "medical-protocol-assistant",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint --fix",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,css,scss,md,html}\"",
    "prepare": "husky install"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.0",
    "@prisma/client": "^5.14.0",
    "@radix-ui/react-dialog": "latest",
    "@radix-ui/react-dropdown-menu": "latest",
    "@radix-ui/react-label": "latest",
    "@radix-ui/react-popover": "latest",
    "@radix-ui/react-select": "latest",
    "@radix-ui/react-slot": "latest",
    "@radix-ui/react-tooltip": "latest",
    "@react-pdf/renderer": "^3.4.0",
    "@tanstack/react-query": "^5.0.0",
    "@trpc/client": "^10.45.0",
    "@trpc/server": "^10.45.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "date-fns": "^3.6.0",
    "docx": "^8.5.0",
    "lucide-react": "latest",
    "mermaid": "^10.9.0",
    "next": "^14.2.0",
    "next-auth": "^4.24.0",
    "openai": "^4.47.0",
    "papaparse": "^5.4.0",
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "react-hook-form": "^7.51.0",
    "reactflow": "^11.11.0",
    "tailwind-merge": "^2.2.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.0",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@types/node": "^20.12.2",
    "@types/papaparse": "^5.3.14",
    "@types/react": "^18.2.73",
    "@types/react-dom": "^18.2.25",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "postcss": "^8.4.38",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.14",
    "prisma": "^5.14.0",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.4.0"
  }
}
```

STEP 2 COMPLETE

**Summary**
- Configured ESLint, Prettier, Husky, and lint-staged for automated code quality checks and formatting.

**Commit Message**
feat(dev): setup eslint, prettier, husky, and lint-staged

feat: configure development environment tooling

This commit sets up ESLint for linting, Prettier for code formatting,
Husky for Git hooks, and lint-staged to run linters/formatters on
staged files before commits.

- Added ESLint configuration (`.eslintrc.json`) extending Next.js and Prettier rules.
- Added Prettier configuration (`.prettierrc.json`) with Tailwind CSS plugin.
- Created Husky pre-commit hook (`.husky/pre-commit`) to run lint-staged.
- Configured lint-staged (`lint-staged.config.js`) to format and lint staged files.
- Added `.env.example` for environment variable management.
- Created a basic `README.md` with setup and development instructions.
- Updated `package.json` with necessary devDependencies and a `prepare` script for Husky.

**Changed Files**
- .eslintrc.json
- .prettierrc.json
- .husky/pre-commit
- lint-staged.config.js
- .env.example
- README.md
- package.json (modified)

**USER INSTRUCTIONS**
1.  Install the new devDependencies:
    ```bash
    pnpm install
    ```
2.  Initialize Husky (if you haven't already or if you pulled these changes):
    ```bash
    pnpm prepare
    ```
    Or manually:
    ```bash
    npx husky install
    ```
3.  Make the pre-commit hook executable (if necessary, especially on Unix-like systems):
    ```bash
    chmod +x .husky/pre-commit
    ```
4.  Copy `.env.example` to `.env.local` and fill in placeholder values if you haven't done so:
    ```bash
    cp .env.example .env.local
    ```
    *(Ensure `DATABASE_URL`, `NEXTAUTH_SECRET`, `OPENAI_API_KEY` are set for future steps)*

```