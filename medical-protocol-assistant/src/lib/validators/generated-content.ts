/**
 * Zod schemas for validating AI-generated medical content and protocol structures.
 * These focus on format and completeness as per project requirements.
 */
import { z } from "zod";
// Assuming ProtocolSectionContentSchema from protocol-schema.ts is a base,
// but AI generation might have slightly different initial structures before full protocol typing.
// For AI specific output, we define detailed schemas here.

// Schema for validating a single medication item generated by AI
export const GeneratedMedicationSchema = z.object({
  name: z.string().min(1, "Nome do medicamento é obrigatório."),
  dose: z.string().min(1, "Dose é obrigatória."),
  route: z.string().min(1, "Via de administração é obrigatória."),
  frequency: z.string().min(1, "Frequência é obrigatória."),
  duration: z.string().optional().or(z.literal("Não especificado")),
  notes: z.string().optional().or(z.literal("Não especificado")),
});
export type GeneratedMedication = z.infer<typeof GeneratedMedicationSchema>;

// Basic schema for the content of any generated section.
// This can be a simple string or a more complex JSON object.
export const GeneratedSectionContentFieldSchema = z.union([
  z.string(),
  z.record(z.string(), z.any()), // Allows for structured JSON objects
  z.array(z.any()), // Allows for lists
]);

// Schema for a single, complete AI-generated protocol section
export const GeneratedSingleSectionSchema = z.object({
  sectionNumber: z.number().int().min(1).max(13),
  title: z.string().min(1, "O título da seção é obrigatório."),
  content: GeneratedSectionContentFieldSchema, // Validates the 'content' field
});
export type GeneratedSingleSection = z.infer<
  typeof GeneratedSingleSectionSchema
>;

// Schema for a full, 13-section AI-generated protocol
// Keys are section numbers as strings ("1", "2", ..., "13")
export const GeneratedFullProtocolSchema = z
  .record(
    z
      .string()
      .regex(
        /^(?:[1-9]|1[0-3])$/,
        "A chave da seção deve ser um número de 1 a 13.",
      ),
    GeneratedSingleSectionSchema,
  )
  .refine(
    (data) => {
      const sectionNumbers = Object.keys(data)
        .map(Number)
        .sort((a, b) => a - b);
      const expectedNumbers = Array.from({ length: 13 }, (_, i) => i + 1);
      return (
        sectionNumbers.length === 13 &&
        sectionNumbers.every((num, index) => num === expectedNumbers[index]) &&
        Object.entries(data).every(
          ([key, value]) => parseInt(key, 10) === value.sectionNumber,
        )
      );
    },
    {
      message:
        "O protocolo deve conter exatamente 13 seções, numeradas de 1 a 13, e o número da seção no objeto deve corresponder à chave.",
    },
  );
export type GeneratedFullProtocol = z.infer<typeof GeneratedFullProtocolSchema>;

// Example: More specific schema for Section 1 (Identificação do Protocolo) content
export const GeneratedSection1ContentSchema = z.object({
  codigoProtocolo: z.string().min(1),
  tituloCompleto: z.string().min(1),
  versao: z.string().min(1),
  origemOrganizacao: z.string().min(1),
  dataElaboracao: z
    .string()
    .regex(
      /^\d{4}-\d{2}-\d{2}$/,
      "Formato de data inválido (esperado YYYY-MM-DD).",
    ),
  dataUltimaRevisao: z
    .string()
    .regex(
      /^\d{4}-\d{2}-\d{2}$/,
      "Formato de data inválido (esperado YYYY-MM-DD).",
    ),
  dataProximaRevisao: z
    .string()
    .regex(
      /^\d{4}-\d{2}-\d{2}$/,
      "Formato de data inválido (esperado YYYY-MM-DD).",
    ),
  ambitoAplicacao: z.string().min(1),
});

// Example: More specific schema for Section 7 (Tratamento) content, if it includes a medications list
export const GeneratedSection7ContentSchema = z.object({
  medidasGerais: z.array(z.string()).optional(),
  tratamentoPacientesInstaveis: z
    .object({
      medicamentos: z.array(GeneratedMedicationSchema).optional(),
      intervencoesNaoFarmacologicas: z.array(z.string()).optional(),
    })
    .optional(),
  tratamentoPacientesEstaveis: z
    .object({
      conduta: z.string().optional(),
      medicamentosConsiderar: z.array(GeneratedMedicationSchema).optional(),
    })
    .optional(),
  // Allow other fields as plain text for narrative parts
  narrativaAdicional: z.string().optional(),
});

// You would create similar specific content schemas for other sections as needed,
// or use a more generic approach if the content is highly variable but must be valid JSON.
