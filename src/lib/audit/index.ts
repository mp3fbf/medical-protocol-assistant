/**
 * Audit Logging Utilities
 *
 * Provides functions to consistently log audit events throughout the application.
 */
import type { PrismaClient, AuditLog } from "@prisma/client";
import type { JsonValue } from "@/types/database"; // Using JsonValue for details

export interface AuditEventData {
  userId?: string; // Optional: for system events or unauthenticated actions
  action: string; // e.g., "PROTOCOL_CREATE", "USER_LOGIN_FAILED"
  resourceType?: string; // e.g., "Protocol", "User", "ProtocolVersion"
  resourceId?: string; // ID of the affected resource
  details?: JsonValue; // Any additional JSON-ifiable details
  ipAddress?: string; // Optional: if available from request context
}

/**
 * Logs an audit event to the database.
 *
 * @param db - The PrismaClient instance.
 * @param eventData - The data for the audit event.
 * @returns The created AuditLog entry or null if logging failed.
 */
export async function logAuditEvent(
  db: PrismaClient,
  eventData: AuditEventData,
): Promise<AuditLog | null> {
  try {
    // Ensure ID is not passed, as it's auto-generated by cuid()
    const { ...dataToCreate } = eventData;

    const auditEntry = await db.auditLog.create({
      data: {
        ...dataToCreate,
        userId: eventData.userId || undefined, // Ensure null becomes undefined for Prisma
        resourceType: eventData.resourceType || undefined,
        resourceId: eventData.resourceId || undefined,
        details: eventData.details || undefined,
        ipAddress: eventData.ipAddress || undefined,
      },
    });
    console.log(
      `[AUDIT] Action: ${eventData.action}, User: ${eventData.userId || "System"}, Resource: ${eventData.resourceType || "N/A"}:${eventData.resourceId || "N/A"}`,
    );
    return auditEntry;
  } catch (error) {
    console.error(
      "Failed to log audit event:",
      error,
      "Event Data:",
      eventData,
    );
    return null;
  }
}

export const AuditActions = {
  PROTOCOL_CREATE: "PROTOCOL_CREATE",
  PROTOCOL_UPDATE_METADATA: "PROTOCOL_UPDATE_METADATA",
  PROTOCOL_VERSION_CREATE: "PROTOCOL_VERSION_CREATE",
  PROTOCOL_STATUS_CHANGE: "PROTOCOL_STATUS_CHANGE",
  PROTOCOL_DELETE: "PROTOCOL_DELETE",
  PROTOCOL_EXPORT: "PROTOCOL_EXPORT",

  USER_LOGIN_SUCCESS: "USER_LOGIN_SUCCESS",
  USER_LOGIN_FAILURE: "USER_LOGIN_FAILURE",
  USER_LOGOUT: "USER_LOGOUT",
  USER_PASSWORD_RESET_REQUEST: "USER_PASSWORD_RESET_REQUEST",
  USER_PASSWORD_RESET_SUCCESS: "USER_PASSWORD_RESET_SUCCESS",
  USER_ROLE_CHANGE: "USER_ROLE_CHANGE",

  AI_RESEARCH_PERFORMED: "AI_RESEARCH_PERFORMED",
  AI_PROTOCOL_GENERATED_FULL: "AI_PROTOCOL_GENERATED_FULL",
  AI_PROTOCOL_GENERATED_SECTION: "AI_PROTOCOL_GENERATED_SECTION",

  SYSTEM_ERROR: "SYSTEM_ERROR",
};
