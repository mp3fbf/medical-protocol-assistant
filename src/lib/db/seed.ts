/**
 * Database Seeding Script
 *
 * This script seeds the database with initial data, such as a default admin user
 * and a specific user for development/mock authentication.
 * Passwords for seeded users will be hashed using bcryptjs.
 */
import { PrismaClient, UserRole } from "@prisma/client";
import { randomUUID } from "crypto"; // Still used for admin ID if not found by email first
import * as bcryptjs from "bcryptjs";

const prisma = new PrismaClient();
const SALT_ROUNDS = 10;

const ADMIN_PLAIN_PASSWORD =
  process.env.SEED_ADMIN_PASSWORD || "adminSecurePassword123!";
const DEV_MOCK_USER_PASSWORD_PLAIN = "password"; // Plain text password for dev mock user

async function main() {
  console.log("Start seeding ...");

  // --- Seed Admin User (general admin) ---
  const adminEmail = process.env.ADMIN_EMAIL || "admin@example.com";
  let adminUser = await prisma.user.findUnique({
    where: { email: adminEmail },
  });

  const adminHashedPassword = bcryptjs.hashSync(
    ADMIN_PLAIN_PASSWORD,
    SALT_ROUNDS,
  );

  if (!adminUser) {
    adminUser = await prisma.user.create({
      data: {
        // id will be generated by @default(cuid())
        email: adminEmail,
        name: "Admin User",
        role: UserRole.ADMIN,
        hashedPassword: adminHashedPassword,
      },
    });
    console.log(
      `Created admin user: ${adminUser.email} with ID: ${adminUser.id} (Password HASHED)`,
    );
  } else {
    // Update if password needs hashing or is incorrect
    if (
      !adminUser.hashedPassword ||
      !bcryptjs.compareSync(ADMIN_PLAIN_PASSWORD, adminUser.hashedPassword)
    ) {
      await prisma.user.update({
        where: { email: adminEmail },
        data: { hashedPassword: adminHashedPassword },
      });
      console.log(`Updated hashed password for admin user: ${adminUser.email}`);
    } else {
      console.log(
        `Admin user ${adminEmail} already exists with a valid hashed password.`,
      );
    }
  }

  // --- Seed Specific Mock User for Development/Testing ---
  // This user ID should match what might be used in NextAuth mock provider if still present,
  // but primarily for consistent test data.
  const mockUserId = "mock-user-id-dev123";
  const mockUserEmail = "dev-mock@example.com";

  let developmentMockUser = await prisma.user.findUnique({
    // Try finding by ID first for consistency if this specific ID is important elsewhere
    where: { id: mockUserId },
  });
  if (!developmentMockUser) {
    // If not found by ID, try by email to avoid creating duplicates if ID changed
    developmentMockUser = await prisma.user.findUnique({
      where: { email: mockUserEmail },
    });
  }

  const mockUserHashedPassword = bcryptjs.hashSync(
    DEV_MOCK_USER_PASSWORD_PLAIN,
    SALT_ROUNDS,
  );

  if (!developmentMockUser) {
    developmentMockUser = await prisma.user.create({
      data: {
        id: mockUserId, // Use the specific ID
        email: mockUserEmail,
        name: "Usuário de Desenvolvimento",
        role: UserRole.ADMIN,
        hashedPassword: mockUserHashedPassword,
      },
    });
    console.log(
      `Created development mock user: ${developmentMockUser.email} with ID: ${developmentMockUser.id}. Password set (HASHED). Use '${DEV_MOCK_USER_PASSWORD_PLAIN}' to login.`,
    );
  } else {
    let updateData: {
      hashedPassword?: string;
      role?: UserRole;
      name?: string;
    } = {};
    let needsUpdate = false;

    if (
      !developmentMockUser.hashedPassword ||
      !bcryptjs.compareSync(
        DEV_MOCK_USER_PASSWORD_PLAIN,
        developmentMockUser.hashedPassword,
      )
    ) {
      updateData.hashedPassword = mockUserHashedPassword;
      updateData.name =
        developmentMockUser.name || "Usuário de Desenvolvimento (Pwd Upd)";
      needsUpdate = true;
      console.log(
        `Development mock user ${mockUserEmail} requires password update (hashing).`,
      );
    }
    if (developmentMockUser.role !== UserRole.ADMIN) {
      // Assuming ADMIN for dev user for full access
      updateData.role = UserRole.ADMIN;
      updateData.name =
        updateData.name || "Usuário de Desenvolvimento (Role Upd)";
      needsUpdate = true;
      console.log(
        `Development mock user ${mockUserEmail} requires role update to ADMIN.`,
      );
    }
    if (developmentMockUser.email !== mockUserEmail) {
      // Ensure email is correct if found by ID
      // This case should ideally not happen if IDs are stable, but as a safeguard.
      console.warn(
        `Mock user with ID ${mockUserId} has email ${developmentMockUser.email}, expected ${mockUserEmail}. Consider manual DB check.`,
      );
    }

    if (needsUpdate) {
      await prisma.user.update({
        where: { id: mockUserId }, // Use the consistent ID for update
        data: updateData,
      });
      console.log(`Updated development mock user: ${mockUserEmail}.`);
    } else {
      console.log(
        `Development mock user ${mockUserEmail} with ID ${mockUserId} already exists with a valid hashed password and role. Use '${DEV_MOCK_USER_PASSWORD_PLAIN}' to login.`,
      );
    }
  }

  console.log("Seeding finished.");
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
